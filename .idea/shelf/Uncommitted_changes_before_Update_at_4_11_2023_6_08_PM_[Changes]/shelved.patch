Index: app/src/main/java/com/example/president/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.president;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.graphics.Color;\r\nimport android.media.Image;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport com.example.GameFramework.GameMainActivity;\r\nimport com.example.GameFramework.LocalGame;\r\nimport com.example.GameFramework.gameConfiguration.GameConfig;\r\nimport com.example.GameFramework.infoMessage.GameState;\r\n\r\nimport org.w3c.dom.Text;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.Collections;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n    ImageView iv_deck, iv_card1,iv_card2,iv_card3,iv_card4,iv_card5,iv_card6,iv_card7,iv_card8,iv_card9,iv_card10,iv_card11,iv_card12,iv_card13, imageView2;\r\n    Cards card = new Cards();\r\n\r\n    //Array of cards that the player chooses\r\n    ArrayList<Integer> chosenCards = new ArrayList<>();\r\n    Button placeCards;\r\n    \r\n    Button passButton;\r\n\r\n    //Text of required number of cards to play\r\n    TextView chosenCardsTotal;\r\n\r\n    //Text of current player\r\n    TextView playerNumberText;\r\n\r\n    PresidentUI presidentUI = new PresidentUI();\r\n    PresidentGameState gameState = new PresidentGameState();\r\n\r\n\r\n    @Override\r\n    protected void onCreate (Bundle savedInstanceSate) {\r\n        super.onCreate(savedInstanceSate);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        passButton = (Button) findViewById((R.id.passButton));\r\n        placeCards = (Button) findViewById(R.id.placeCards);\r\n        placeCards = presidentUI.updateButtonColor(placeCards, Color.RED);\r\n        chosenCardsTotal = (TextView) findViewById(R.id.cardPlay);\r\n        playerNumberText = (TextView) findViewById((R.id.playerNumber));\r\n\r\n        iv_deck = (ImageView) findViewById(R.id.iv_deck);\r\n        iv_card1 = (ImageView) findViewById(R.id.iv_card1);\r\n        iv_card2 = (ImageView) findViewById(R.id.iv_card2);\r\n        iv_card3 = (ImageView) findViewById(R.id.iv_card3);\r\n        iv_card4 = (ImageView) findViewById(R.id.iv_card4);\r\n        iv_card5 = (ImageView) findViewById(R.id.iv_card5);\r\n        iv_card6 = (ImageView) findViewById(R.id.iv_card6);\r\n        iv_card7 = (ImageView) findViewById(R.id.iv_card7);\r\n        iv_card8 = (ImageView) findViewById(R.id.iv_card8);\r\n        iv_card9 = (ImageView) findViewById(R.id.iv_card9);\r\n        iv_card10 = (ImageView) findViewById(R.id.iv_card10);\r\n        iv_card11 = (ImageView) findViewById(R.id.iv_card11);\r\n        iv_card12 = (ImageView) findViewById(R.id.iv_card12);\r\n        iv_card13 = (ImageView) findViewById(R.id.iv_card13);\r\n        imageView2 = (ImageView) findViewById(R.id.imageView2);\r\n\r\n        iv_card1.setVisibility(View.INVISIBLE);\r\n        iv_card2.setVisibility(View.INVISIBLE);\r\n        iv_card3.setVisibility(View.INVISIBLE);\r\n        iv_card4.setVisibility(View.INVISIBLE);\r\n        iv_card5.setVisibility(View.INVISIBLE);\r\n        iv_card6.setVisibility(View.INVISIBLE);\r\n        iv_card7.setVisibility(View.INVISIBLE);\r\n        iv_card8.setVisibility(View.INVISIBLE);\r\n        iv_card9.setVisibility(View.INVISIBLE);\r\n        iv_card10.setVisibility(View.INVISIBLE);\r\n        iv_card11.setVisibility(View.INVISIBLE);\r\n        iv_card12.setVisibility(View.INVISIBLE);\r\n        iv_card13.setVisibility(View.INVISIBLE);\r\n\r\n        iv_deck.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                card.setCards();\r\n\r\n                //Assigns cards to a player's deck before moving\r\n                //to next player and reshuffling\r\n                for (int i = 0; i < 4; i++){\r\n                    Collections.shuffle(card.cards);\r\n                    for (int j  = 0; j < 13; j++){\r\n                        gameState.allPlayers[i][j] = card.cards.get(j);\r\n                    }\r\n                }\r\n\r\n                //Resets game variable back to default\r\n                gameState.currentPlayer = 0;\r\n\r\n                card.assignImages(gameState.allPlayers[0][0], iv_card1);\r\n                card.assignImages(gameState.allPlayers[0][1], iv_card2);\r\n                card.assignImages(gameState.allPlayers[0][2], iv_card3);\r\n                card.assignImages(gameState.allPlayers[0][3], iv_card4);\r\n                card.assignImages(gameState.allPlayers[0][4], iv_card5);\r\n                card.assignImages(gameState.allPlayers[0][5], iv_card6);\r\n                card.assignImages(gameState.allPlayers[0][6], iv_card7);\r\n                card.assignImages(gameState.allPlayers[0][7], iv_card8);\r\n                card.assignImages(gameState.allPlayers[0][8], iv_card9);\r\n                card.assignImages(gameState.allPlayers[0][9], iv_card10);\r\n                card.assignImages(gameState.allPlayers[0][10], iv_card11);\r\n                card.assignImages(gameState.allPlayers[0][11], iv_card12);\r\n                card.assignImages(gameState.allPlayers[0][12], iv_card13);\r\n\r\n                iv_card1.setVisibility(View.VISIBLE);\r\n                iv_card2.setVisibility(View.VISIBLE);\r\n                iv_card3.setVisibility(View.VISIBLE);\r\n                iv_card4.setVisibility(View.VISIBLE);\r\n                iv_card5.setVisibility(View.VISIBLE);\r\n                iv_card6.setVisibility(View.VISIBLE);\r\n                iv_card7.setVisibility(View.VISIBLE);\r\n                iv_card8.setVisibility(View.VISIBLE);\r\n                iv_card9.setVisibility(View.VISIBLE);\r\n                iv_card10.setVisibility(View.VISIBLE);\r\n                iv_card11.setVisibility(View.VISIBLE);\r\n                iv_card12.setVisibility(View.VISIBLE);\r\n                iv_card13.setVisibility(View.VISIBLE);\r\n                card.assignImages(500,imageView2);\r\n\r\n                //Resets game variables back to default\r\n                presidentUI.updateChosenCardsTotal(chosenCardsTotal, 0);\r\n                ImageView[] views = new ImageView[]{iv_card1,iv_card2,iv_card3,iv_card4,iv_card5,iv_card6,iv_card7,iv_card8,iv_card9,iv_card10,iv_card11,iv_card12,iv_card13, imageView2};\r\n                views = presidentUI.resetCards(views);\r\n                chosenCards.clear();\r\n                presidentUI.updateButtonColor(placeCards, Color.RED);\r\n                gameState.cardsAtPlay = 0;\r\n                gameState.passCount = 0;\r\n                playerNumberText = presidentUI.updatePlayerNumberText(playerNumberText, gameState.currentPlayer, false);\r\n                passButton.setClickable(true);\r\n            }\r\n        });\r\n\r\n        placeCards.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (card.legal(chosenCards, gameState.cardsAtPlay, gameState.currentCardNum)){\r\n                    //Since the cards are the same number, the displayed image is the first chosen card\r\n                    card.assignImages(chosenCards.get(0), imageView2);\r\n                    iv_deck.setVisibility(View.VISIBLE);\r\n                    gameState.cardsAtPlay = chosenCards.size();\r\n                    //Updates current card value to chosen card value\r\n                    gameState.currentCardNum = chosenCards.get(0) % 100;\r\n                    presidentUI.updateChosenCardsTotal(chosenCardsTotal, gameState.cardsAtPlay);\r\n                    presidentUI.updateButtonColor(placeCards, Color.RED);\r\n                    gameState.passCount = 0;\r\n\r\n                    //Finds chosen cards in current player's hand and turns those values into 0\r\n                    while (chosenCards.size() != 0){\r\n                        for (int i = 0; i < 13; i++){\r\n                            if (chosenCards.get(0) == gameState.allPlayers[gameState.currentPlayer][i]){\r\n                                gameState.allPlayers[gameState.currentPlayer][i] = 0;\r\n                                break;\r\n                            }\r\n                        }\r\n                        chosenCards.remove(Integer.valueOf(chosenCards.get(0)));\r\n                    }\r\n\r\n                    ImageView[] views = new ImageView[]{iv_card1,iv_card2,iv_card3,iv_card4,iv_card5,iv_card6,iv_card7,iv_card8,iv_card9,iv_card10,iv_card11,iv_card12,iv_card13, imageView2};\r\n                    views = presidentUI.updateCards(views, gameState.allPlayers[gameState.currentPlayer]);\r\n                    playerNumberText = presidentUI.updatePlayerNumberText(playerNumberText, gameState.currentPlayer, false);\r\n\r\n                    //Counts all of the 0 values in current player's hand\r\n                    int count = 0;\r\n                    for (int i = 0; i < 13; i++){\r\n                        if (gameState.allPlayers[gameState.currentPlayer][i] == 0)\r\n                            count++;\r\n                    }\r\n                    //If 13 zeroes are counted, then the current player has won\r\n                    //and all of the buttons become unclickable\r\n                    if (count == 13){\r\n                        for (int i = 0; i < 13; i++){\r\n                            views[i].setClickable(false);\r\n                        }\r\n                        passButton.setClickable(false);\r\n                        playerNumberText = presidentUI.updatePlayerNumberText(playerNumberText, gameState.currentPlayer, true);\r\n                    }\r\n                    //Otherwise, turn goes to next player\r\n                    else {\r\n                        gameState.currentPlayer++;\r\n                        //A check to ensure the currentPlayer stays with 0-3 range\r\n                        if (gameState.currentPlayer > 3) {\r\n                            gameState.currentPlayer = 0;\r\n                        }\r\n                        //Resets certain UI elements to prepare for the next player\r\n                        presidentUI.updateCards(views, gameState.allPlayers[gameState.currentPlayer]);\r\n                        views = presidentUI.resetCards(views);\r\n                        chosenCards.clear();\r\n                        presidentUI.updateButtonColor(placeCards, Color.RED);\r\n                        playerNumberText = presidentUI.updatePlayerNumberText(playerNumberText, gameState.currentPlayer, false);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        passButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                //Turn goes to next player\r\n                gameState.currentPlayer++;\r\n                //A check to ensure the currentPlayer stays with 0-3 range\r\n                if (gameState.currentPlayer > 3) {\r\n                    gameState.currentPlayer = 0;\r\n                }\r\n                //Prepares displayed hand for next player\r\n                ImageView[] views = new ImageView[]{iv_card1,iv_card2,iv_card3,iv_card4,iv_card5,iv_card6,iv_card7,iv_card8,iv_card9,iv_card10,iv_card11,iv_card12,iv_card13, imageView2};\r\n                presidentUI.updateCards(views, gameState.allPlayers[gameState.currentPlayer]);\r\n\r\n                //Increments number of passes\r\n                gameState.passCount++;\r\n                //After a pass, if number of passes is 3, then the round resets\r\n                if (gameState.passCount == 3){\r\n                    //Resets certain UI elements to prepare for new round\r\n                    gameState.cardsAtPlay = 0;\r\n                    card.assignImages(500, imageView2);\r\n                    presidentUI.updateChosenCardsTotal(chosenCardsTotal, gameState.cardsAtPlay);\r\n                }\r\n                //Resets certain UI elements to prepare for the next player\r\n                views = presidentUI.resetCards(views);\r\n                chosenCards.clear();\r\n                presidentUI.updateButtonColor(placeCards, Color.RED);\r\n                playerNumberText = presidentUI.updatePlayerNumberText(playerNumberText, gameState.currentPlayer, false);\r\n            }\r\n        });\r\n\r\n        //All of the following onClickListeners have the same code tailored\r\n        //to each card\r\n        iv_card1.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                //If the card isn't raised, then it becomes raised\r\n                //and is added as a chosen card\r\n                if (iv_card1.getPaddingBottom() == 0) {\r\n                    iv_card1.setPadding(0, 0, 0, 50);\r\n                    chosenCards.add(gameState.allPlayers[gameState.currentPlayer][0]);\r\n                }\r\n                //If the card is raised, then it returns to its original position\r\n                //and is removed as a chosen card\r\n                else {\r\n                    iv_card1.setPadding(0, 0, 0, 0);\r\n                    chosenCards.remove(Integer.valueOf(gameState.allPlayers[gameState.currentPlayer][0]));\r\n                }\r\n\r\n                //Checks if the chosen cards are legal so the placeCards button\r\n                //can have the correct color\r\n                if (card.legal(chosenCards, gameState.cardsAtPlay, gameState.currentCardNum)){\r\n                    presidentUI.updateButtonColor(placeCards, Color.GREEN);\r\n                }\r\n                else{\r\n                    presidentUI.updateButtonColor(placeCards, Color.RED);\r\n                }\r\n            }\r\n        });\r\n        iv_card2.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (iv_card2.getPaddingBottom() == 0) {\r\n                    iv_card2.setPadding(0, 0, 0, 50);\r\n                    chosenCards.add(gameState.allPlayers[gameState.currentPlayer][1]);\r\n                }\r\n                else {\r\n                    iv_card2.setPadding(0, 0, 0, 0);\r\n                    chosenCards.remove(Integer.valueOf(gameState.allPlayers[gameState.currentPlayer][1]));\r\n                }\r\n\r\n                if (card.legal(chosenCards, gameState.cardsAtPlay, gameState.currentCardNum)){\r\n                    presidentUI.updateButtonColor(placeCards, Color.GREEN);\r\n                }\r\n                else{\r\n                    presidentUI.updateButtonColor(placeCards, Color.RED);\r\n                }\r\n            }\r\n        });\r\n        iv_card3.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (iv_card3.getPaddingBottom() == 0) {\r\n                    iv_card3.setPadding(0, 0, 0, 50);\r\n                    chosenCards.add(gameState.allPlayers[gameState.currentPlayer][2]);\r\n                }\r\n                else {\r\n                    iv_card3.setPadding(0, 0, 0, 0);\r\n                    chosenCards.remove(Integer.valueOf(gameState.allPlayers[gameState.currentPlayer][2]));\r\n                }\r\n\r\n                if (card.legal(chosenCards, gameState.cardsAtPlay, gameState.currentCardNum)){\r\n                    presidentUI.updateButtonColor(placeCards, Color.GREEN);\r\n                }\r\n                else{\r\n                    presidentUI.updateButtonColor(placeCards, Color.RED);\r\n                }\r\n            }\r\n        });\r\n        iv_card4.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (iv_card4.getPaddingBottom() == 0) {\r\n                    iv_card4.setPadding(0, 0, 0, 50);\r\n                    chosenCards.add(gameState.allPlayers[gameState.currentPlayer][3]);\r\n                }\r\n                else {\r\n                    iv_card4.setPadding(0, 0, 0, 0);\r\n                    chosenCards.remove(Integer.valueOf(gameState.allPlayers[gameState.currentPlayer][3]));\r\n                }\r\n\r\n                if (card.legal(chosenCards, gameState.cardsAtPlay, gameState.currentCardNum)){\r\n                    presidentUI.updateButtonColor(placeCards, Color.GREEN);\r\n                }\r\n                else{\r\n                    presidentUI.updateButtonColor(placeCards, Color.RED);\r\n                }\r\n            }\r\n        });\r\n        iv_card5.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (iv_card5.getPaddingBottom() == 0) {\r\n                    iv_card5.setPadding(0, 0, 0, 50);\r\n                    chosenCards.add(gameState.allPlayers[gameState.currentPlayer][4]);\r\n                }\r\n                else {\r\n                    iv_card5.setPadding(0, 0, 0, 0);\r\n                    chosenCards.remove(Integer.valueOf(gameState.allPlayers[gameState.currentPlayer][4]));\r\n                }\r\n\r\n                if (card.legal(chosenCards, gameState.cardsAtPlay, gameState.currentCardNum)){\r\n                    presidentUI.updateButtonColor(placeCards, Color.GREEN);\r\n                }\r\n                else{\r\n                    presidentUI.updateButtonColor(placeCards, Color.RED);\r\n                }\r\n            }\r\n        });\r\n        iv_card6.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (iv_card6.getPaddingBottom() == 0) {\r\n                    iv_card6.setPadding(0, 0, 0, 50);\r\n                    chosenCards.add(gameState.allPlayers[gameState.currentPlayer][5]);\r\n                }\r\n                else {\r\n                    iv_card6.setPadding(0, 0, 0, 0);\r\n                    chosenCards.remove(Integer.valueOf(gameState.allPlayers[gameState.currentPlayer][5]));\r\n                }\r\n\r\n                if (card.legal(chosenCards, gameState.cardsAtPlay, gameState.currentCardNum)){\r\n                    presidentUI.updateButtonColor(placeCards, Color.GREEN);\r\n                }\r\n                else{\r\n                    presidentUI.updateButtonColor(placeCards, Color.RED);\r\n                }\r\n            }\r\n        });\r\n        iv_card7.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (iv_card7.getPaddingBottom() == 0) {\r\n                    iv_card7.setPadding(0, 0, 0, 50);\r\n                    chosenCards.add(gameState.allPlayers[gameState.currentPlayer][6]);\r\n                }\r\n                else {\r\n                    iv_card7.setPadding(0, 0, 0, 0);\r\n                    chosenCards.remove(Integer.valueOf(gameState.allPlayers[gameState.currentPlayer][6]));\r\n                }\r\n\r\n                if (card.legal(chosenCards, gameState.cardsAtPlay, gameState.currentCardNum)){\r\n                    presidentUI.updateButtonColor(placeCards, Color.GREEN);\r\n                }\r\n                else{\r\n                    presidentUI.updateButtonColor(placeCards, Color.RED);\r\n                }\r\n            }\r\n        });\r\n        iv_card8.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (iv_card8.getPaddingBottom() == 0) {\r\n                    iv_card8.setPadding(0, 0, 0, 50);\r\n                    chosenCards.add(gameState.allPlayers[gameState.currentPlayer][7]);\r\n                }\r\n                else {\r\n                    iv_card8.setPadding(0, 0, 0, 0);\r\n                    chosenCards.remove(Integer.valueOf(gameState.allPlayers[gameState.currentPlayer][7]));\r\n                }\r\n\r\n                if (card.legal(chosenCards, gameState.cardsAtPlay, gameState.currentCardNum)){\r\n                    presidentUI.updateButtonColor(placeCards, Color.GREEN);\r\n                }\r\n                else{\r\n                    presidentUI.updateButtonColor(placeCards, Color.RED);\r\n                }\r\n            }\r\n        });\r\n\r\n        iv_card9.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (iv_card9.getPaddingBottom() == 0) {\r\n                    iv_card9.setPadding(0, 0, 0, 50);\r\n                    chosenCards.add(gameState.allPlayers[gameState.currentPlayer][8]);\r\n                }\r\n                else {\r\n                    iv_card9.setPadding(0, 0, 0, 0);\r\n                    chosenCards.remove(Integer.valueOf(gameState.allPlayers[gameState.currentPlayer][8]));\r\n                }\r\n\r\n                if (card.legal(chosenCards, gameState.cardsAtPlay, gameState.currentCardNum)){\r\n                    presidentUI.updateButtonColor(placeCards, Color.GREEN);\r\n                }\r\n                else{\r\n                    presidentUI.updateButtonColor(placeCards, Color.RED);\r\n                }\r\n            }\r\n        });\r\n\r\n        iv_card10.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (iv_card10.getPaddingBottom() == 0) {\r\n                    iv_card10.setPadding(0, 0, 0, 50);\r\n                    chosenCards.add(gameState.allPlayers[gameState.currentPlayer][9]);\r\n                }\r\n                else {\r\n                    iv_card10.setPadding(0, 0, 0, 0);\r\n                    chosenCards.remove(Integer.valueOf(gameState.allPlayers[gameState.currentPlayer][9]));\r\n                }\r\n\r\n                if (card.legal(chosenCards, gameState.cardsAtPlay, gameState.currentCardNum)){\r\n                    presidentUI.updateButtonColor(placeCards, Color.GREEN);\r\n                }\r\n                else{\r\n                    presidentUI.updateButtonColor(placeCards, Color.RED);\r\n                }\r\n            }\r\n        });\r\n\r\n        iv_card11.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (iv_card11.getPaddingBottom() == 0) {\r\n                    iv_card11.setPadding(0, 0, 0, 50);\r\n                    chosenCards.add(gameState.allPlayers[gameState.currentPlayer][10]);\r\n                }\r\n                else {\r\n                    iv_card11.setPadding(0, 0, 0, 0);\r\n                    chosenCards.remove(Integer.valueOf(gameState.allPlayers[gameState.currentPlayer][10]));\r\n                }\r\n\r\n                if (card.legal(chosenCards, gameState.cardsAtPlay, gameState.currentCardNum)){\r\n                    presidentUI.updateButtonColor(placeCards, Color.GREEN);\r\n                }\r\n                else{\r\n                    presidentUI.updateButtonColor(placeCards, Color.RED);\r\n                }\r\n            }\r\n        });\r\n\r\n        iv_card12.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (iv_card12.getPaddingBottom() == 0) {\r\n                    iv_card12.setPadding(0, 0, 0, 50);\r\n                    chosenCards.add(gameState.allPlayers[gameState.currentPlayer][11]);\r\n                }\r\n                else {\r\n                    iv_card12.setPadding(0, 0, 0, 0);\r\n                    chosenCards.remove(Integer.valueOf(gameState.allPlayers[gameState.currentPlayer][11]));\r\n                }\r\n\r\n                if (card.legal(chosenCards, gameState.cardsAtPlay, gameState.currentCardNum)){\r\n                    presidentUI.updateButtonColor(placeCards, Color.GREEN);\r\n                }\r\n                else{\r\n                    presidentUI.updateButtonColor(placeCards, Color.RED);\r\n                }\r\n            }\r\n        });\r\n\r\n        iv_card13.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (iv_card13.getPaddingBottom() == 0) {\r\n                    iv_card13.setPadding(0, 0, 0, 50);\r\n                    chosenCards.add(gameState.allPlayers[gameState.currentPlayer][12]);\r\n                }\r\n                else {\r\n                    iv_card13.setPadding(0, 0, 0, 0);\r\n                    chosenCards.remove(Integer.valueOf(gameState.allPlayers[gameState.currentPlayer][12]));\r\n                }\r\n\r\n                if (card.legal(chosenCards, gameState.cardsAtPlay, gameState.currentCardNum)){\r\n                    presidentUI.updateButtonColor(placeCards, Color.GREEN);\r\n                }\r\n                else{\r\n                    presidentUI.updateButtonColor(placeCards, Color.RED);\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n//private static final int PORT_NUMBER = 3384;\r\n\r\n\r\n\r\n\r\n   /* @Override\r\n    public GameConfig createDefaultConfig() {\r\n\r\n        ArrayList<GamePlayerType> playerType = new ArrayList<>();\r\n        playerType.add(new GamePlayerType(\"Human Player\") {\r\n            @Override\r\n            public GamePlayer createPlayer(String name) {\r\n                return new HumanPlayer(name);\r\n            }\r\n        });\r\n\r\n        playerType.add(new GamePlayerType(\"Computer Player\") {\r\n            @Override\r\n            public GamePlayer createPlayer(String name) {\r\n                return new PresidentComputerPlayer(name);\r\n            }\r\n        });\r\n\r\n        GameConfig defaultConfig = new GameConfig(playerType, 4, 4, \"Pig\", PORT_NUMBER);\r\n        defaultConfig.addPlayer(\"Human\", 0); // player 1: a human player\r\n        defaultConfig.addPlayer(\"Computer\", 1); // player 2: a computer player\r\n        defaultConfig.addPlayer(\"Computer\", 2);\r\n        defaultConfig.addPlayer(\"Computer\",4);\r\n\r\n        defaultConfig.setRemoteData(\"Remote Human Player\", \"\", 0);\r\n\r\n        return defaultConfig;\r\n\r\n\r\n    }\r\n\r\n\r\n    public LocalGame createLocalGame(GameState gameState) {\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n    */
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/president/MainActivity.java b/app/src/main/java/com/example/president/MainActivity.java
--- a/app/src/main/java/com/example/president/MainActivity.java	(revision 051d88810d8383e5fe6c2c870db2384cb2be71fd)
+++ b/app/src/main/java/com/example/president/MainActivity.java	(date 1681260796840)
@@ -199,6 +199,9 @@
                         chosenCards.clear();
                         presidentUI.updateButtonColor(placeCards, Color.RED);
                         playerNumberText = presidentUI.updatePlayerNumberText(playerNumberText, gameState.currentPlayer, false);
+                        if (gameState.currentPlayer == 1 || gameState.currentPlayer == 3){
+
+                        }
                     }
                 }
             }
